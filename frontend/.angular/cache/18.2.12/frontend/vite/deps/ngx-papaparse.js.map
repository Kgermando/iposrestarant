{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-papaparse/fesm2022/ngx-papaparse.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport * as lib from 'papaparse/papaparse.min.js';\nclass Papa {\n  constructor() {\n    this._papa = lib;\n  }\n  /**\n   * Parse CSV to an array\n   */\n  parse(csv, config) {\n    return this._papa.parse(csv, config);\n  }\n  /**\n   * Convert an array into CSV\n   */\n  unparse(data, config) {\n    return this._papa.unparse(data, config);\n  }\n  /**\n   * Set the size in bytes of each file chunk.\n   * Used when streaming files obtained from the DOM that\n   * exist on the local computer. Default 10 MB.\n   */\n  setLocalChunkSize(value) {\n    this._papa.LocalChunkSize = value;\n  }\n  /**\n   * Set the size in bytes of each remote file chunk.\n   * Used when streaming remote files. Default 5 MB.\n   */\n  setRemoteChunkSize(value) {\n    this._papa.RemoteChunkSize = value;\n  }\n  /**\n   * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.\n   */\n  setDefaultDelimiter(value) {\n    this._papa.DefaultDelimiter = value;\n  }\n  /**\n   * An array of characters that are not allowed as delimiters.\n   */\n  get badDelimiters() {\n    return this._papa.BAD_DELIMITERS;\n  }\n  /**\n   * The true delimiter. Invisible. ASCII code 30.\n   * Should be doing the job we strangely rely upon commas and tabs for.\n   */\n  get recordSeparator() {\n    return this._papa.RECORD_SEP;\n  }\n  /**\n   * Also sometimes used as a delimiting character. ASCII code 31.\n   */\n  get unitSeparator() {\n    return this._papa.UNIT_SEP;\n  }\n  /**\n   * Whether or not the browser supports HTML5 Web Workers.\n   * If false, worker: true will have no effect.\n   */\n  get workersSupported() {\n    return this._papa.WORKERS_SUPPORTED;\n  }\n  static {\n    this.ɵfac = function Papa_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Papa)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Papa,\n      factory: Papa.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Papa, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of papaparse\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Papa };\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAEA,UAAqB;AACrB,IAAM,OAAN,MAAM,MAAK;AAAA,EACT,cAAc;AACZ,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM,KAAK,QAAQ;AACjB,WAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ,MAAM,QAAQ;AACpB,WAAO,KAAK,MAAM,QAAQ,MAAM,MAAM;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,OAAO;AACvB,SAAK,MAAM,iBAAiB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,OAAO;AACxB,SAAK,MAAM,kBAAkB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB,OAAO;AACzB,SAAK,MAAM,mBAAmB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,gBAAgB;AAClB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,kBAAkB;AACpB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,gBAAgB;AAClB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,mBAAmB;AACrB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EACA,OAAO;AACL,SAAK,OAAO,SAAS,aAAa,mBAAmB;AACnD,aAAO,KAAK,qBAAqB,OAAM;AAAA,IACzC;AAAA,EACF;AAAA,EACA,OAAO;AACL,SAAK,QAA0B,mBAAmB;AAAA,MAChD,OAAO;AAAA,MACP,SAAS,MAAK;AAAA,MACd,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AACF;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,MAAM,CAAC;AAAA,IAC7E,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;",
  "names": []
}
